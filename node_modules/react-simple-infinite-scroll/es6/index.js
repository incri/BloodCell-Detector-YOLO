import * as tslib_1 from "tslib";
import * as React from 'react';
var throttle = require('lodash.throttle');
var InfiniteScroll = (function (_super) {
    tslib_1.__extends(InfiniteScroll, _super);
    function InfiniteScroll() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.checkWindowScroll = function () {
            if (_this.props.isLoading) {
                return;
            }
            if (_this.props.hasMore &&
                _this.sentinel.getBoundingClientRect().top - window.innerHeight <
                    _this.props.threshold) {
                _this.props.onLoadMore();
            }
        };
        return _this;
    }
    InfiniteScroll.prototype.componentDidMount = function () {
        window.addEventListener('scroll', throttle(this.checkWindowScroll, this.props.throttle));
        window.removeEventListener('resize', throttle(this.checkWindowScroll, this.props.throttle));
    };
    InfiniteScroll.prototype.componentWillUnmount = function () {
        window.removeEventListener('scroll', throttle(this.checkWindowScroll, this.props.throttle));
        window.removeEventListener('resize', throttle(this.checkWindowScroll, this.props.throttle));
    };
    InfiniteScroll.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", null,
            this.props.children,
            React.createElement("div", { ref: function (i) { return _this.sentinel = i; } })));
    };
    return InfiniteScroll;
}(React.Component));
export { InfiniteScroll };
InfiniteScroll.defaultProps = {
    threshold: 100,
    throttle: 64,
};
export default React.createFactory(InfiniteScroll);
